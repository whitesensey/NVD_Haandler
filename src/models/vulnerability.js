const dbClient = require('../config/dbclient');
const utils = require('../utils');

class Vulnerability {

    constructor(){
        this.tableName = 'vulnerability';
    }

    async create(year, id, content) {
        const db = await dbClient.getConnection();
        const query = 'INSERT INTO ' + this.tableName + '(year, id, content) VALUES ($1, $2, $3)';
        let res = '';
        try {
            res = await db.query(query, [year, id, content]);
        }
        catch(e){
            console.error(e);
            res = {
                error: e.detail
            };
        }
        dbClient.closeConnection(db);
        return res;
    }

    async createOrUpdate(year, id, content) {
        const db = await dbClient.getConnection();
        const query = 'INSERT INTO ' + this.tableName + '(year, id, content) VALUES ($1, $2, $3) ON CONFLICT ON CONSTRAINT vulnerability_pkey DO UPDATE SET content = $3';
        let res = '';
        try {
            res = await db.query(query, [year, id, content]);
        }
        catch(e){
            console.error(e);
            res = {
                error: e.detail
            };
        }
        dbClient.closeConnection(db);
        return res;
    }

    async cleanTable(){
        const db = await dbClient.getConnection();
        return await db.query("TRUNCATE " + this.tableName);
    }

    async update(year, id, content) {
        const db = await dbClient.getConnection();
        const query = 'UPDATE '+ this.tableName + ' SET content = $3 WHERE year = $1 AND id = $2';
        let res = '';
        try {
            res = await db.query(query, [year, id, content]);
        }
        catch(e){
            console.error(e);
            res = {
                error: e.detail
            };
        }
        dbClient.closeConnection(db);
        return res;
    }

    async read(year, id) {
        const db = await dbClient.getConnection();
        const query = 'SELECT content FROM '+ this.tableName + ' WHERE year = $1 AND id = $2';
        let res = '';
        try {
            let { rows } = await db.query(query, [year, id]);
            if(rows && rows.length)
                res = rows[0]["content"];
            else
                res = { error: "No such vulnerability." }
        }
        catch(e){
            res = { error: e.detail };
        }
        dbClient.closeConnection(db);
        return res;
    }

    async delete(year, id) {
        const db = await dbClient.getConnection();
        const query = 'DELETE FROM '+ this.tableName + ' WHERE year = $1 AND id = $2';
        let res = '';
        try {
            res = await db.query(query, [year, id]);
        }
        catch(e){
            console.error(e);
            res = {
                error: e.detail
            };
        }
        dbClient.closeConnection(db);
        return res;
    }

    async listAll() {
        const db = await dbClient.getConnection();
        const query = 'SELECT content FROM '+ this.tableName;
        let res = '';
        try {
            let { rows } = await db.query(query);
            if(rows && rows.length){
                res = [];
                for(let i in rows){
                    res.push(rows[i]["content"]);
                }
            }
        }
        catch(e){
            console.error(e);
            res = {
                error: e.detail
            };
        }
        dbClient.closeConnection(db);
        return res;
    }

    async getVulnerabilitiesByCVE(keys){
        const db = await dbClient.getConnection();
        let res = '';
        let whereStatement = '';
        let params = [];
        for(let i = 0; i < keys.length; i++){
            if(whereStatement.length)
                whereStatement += " OR ";
            whereStatement += "(year=$" + (i*2+1);
            params.push(keys[i].year);
            whereStatement += " AND id=$" + (i*2+2) + ")";
            params.push(keys[i].id);
        }
        const query = 'SELECT * FROM '+ this.tableName + ' WHERE ' + whereStatement;
        try {
            let { rows } = await db.query(query, params);
            if(rows && rows.length){
                res = {};
                for(let i in rows){
                    let issue = rows[i];
                    res["CVE-"+ issue.year + "-" + utils.normalizeId(issue.id)] = issue["content"];
                }
            }
        }
        catch(e){
            console.error(e);
            res = { error: e.detail };
        }
        dbClient.closeConnection(db);
        return res;
    }
}

module.exports = new Vulnerability();